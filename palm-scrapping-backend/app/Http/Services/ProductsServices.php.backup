<?php
namespace App\Http\Services;
use App\Models\Product;
use GuzzleHttp\Client;
use GuzzleHttp\Exception\RequestException;
use Illuminate\Support\Facades\Log;
use DOMDocument;
use DOMXPath;
class ProductsServices
{
    private $client;
    private $apifyToken = 'apify_api_zmVr5LMUhXGM0dhjBOGMBMCKSB6d1D3TnPvS';
    private $userAgents = [
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0',
        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:89.0) Gecko/20100101 Firefox/89.0',
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Edge/91.0.864.59',
    ];
    public function __construct()
    {
        $this->client = new Client([
            'timeout' => 30,
            'verify' => false,
            'headers' => [
                'Accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                'Accept-Language' => 'en-US,en;q=0.5',
                'Accept-Encoding' => 'gzip, deflate',
                'Connection' => 'keep-alive',
                'Upgrade-Insecure-Requests' => '1',
            ]
        ]);
    }
    public function fetchFromApify($limit = 10)
    {
        try {
            $datasetUrl = "https://api.apify.com/v2/datasets/OsBT6oq7cNrLDjF3Y/items";
            $url = $datasetUrl . "?token=" . $this->apifyToken . "&limit=" . $limit;
            
            $response = $this->client->get($url);
            $data = json_decode($response->getBody()->getContents(), true);
            
            if (!$data || !is_array($data)) {
                throw new \Exception('Invalid response from Apify API');
            }
            
            $savedProducts = [];
            foreach ($data as $productData) {
                try {
                    $processedData = $this->processApifyProduct($productData);
                    if ($processedData) {
                        $product = $this->saveProduct($processedData);
                        $savedProducts[] = $product;
                    }
                } catch (\Exception $e) {
                    Log::error('Failed to process Apify product: ' . $e->getMessage());
                    continue;
                }
            }
            
            return $savedProducts;
        } catch (\Exception $e) {
            Log::error('Apify API fetch failed: ' . $e->getMessage());
            throw $e;
        }
    }
    private function processApifyProduct($productData)
    {
        $title = $productData['title'] ?? $productData['name'] ?? '';
        $price = 0;
        $imageUrl = '';
        
        if (isset($productData['price'])) {
            if (is_array($productData['price'])) {
                $price = $productData['price']['value'] ?? 0;
            } else {
                $price = (float) preg_replace('/[^0-9.]/', '', $productData['price']);
            }
        }
        
        if (isset($productData['images']) && is_array($productData['images']) && !empty($productData['images'])) {
            $imageUrl = $productData['images'][0]['url'] ?? '';
        } elseif (isset($productData['image'])) {
            $imageUrl = $productData['image'];
        }
        
        if (empty($title)) {
            return null;
        }
        
        return [
            'title' => $title,
            'price' => $price,
            'image_url' => $imageUrl,
            'source_url' => $productData['url'] ?? ''
        ];
    }
    public function scrapeAmazonProduct($url)
    {
        try {
            $html = $this->fetchPage($url);
            return $this->parseAmazonProduct($html, $url);
        } catch (\Exception $e) {
            Log::error('Amazon scraping failed: ' . $e->getMessage());
            return null;
        }
    }
    public function scrapeJumiaProduct($url)
    {
        try {
            $html = $this->fetchPage($url);
            return $this->parseJumiaProduct($html, $url);
        } catch (\Exception $e) {
            Log::error('Jumia scraping failed: ' . $e->getMessage());
            return null;
        }
    }
    public function scrapeProduct($url)
    {
        if (str_contains($url, 'amazon')) {
            return $this->scrapeAmazonProduct($url);
        } elseif (str_contains($url, 'jumia')) {
            return $this->scrapeJumiaProduct($url);
        } else {
            throw new \Exception('Unsupported eCommerce site');
        }
    }
    private function fetchPage($url)
    {
        $userAgent = $this->userAgents[array_rand($this->userAgents)];
        
        $response = $this->client->get($url, [
            'headers' => [
                'User-Agent' => $userAgent,
            ]
        ]);

        return $response->getBody()->getContents();
    }
    private function parseAmazonProduct($html, $url)
    {
        $dom = new DOMDocument();
        @$dom->loadHTML($html);
        $xpath = new DOMXPath($dom);

        $titleNode = $xpath->query('//span[@id="productTitle"]')->item(0);
        $title = $titleNode ? trim($titleNode->textContent) : '';

        $priceNode = $xpath->query('//span[@class="a-price-whole"]')->item(0);
        $price = $priceNode ? (float) str_replace(',', '', $priceNode->textContent) : 0;

        $imageNode = $xpath->query('//img[@id="landingImage"]')->item(0);
        $imageUrl = $imageNode ? $imageNode->getAttribute('src') : '';

        if (empty($title)) {
            throw new \Exception('Could not extract product title from Amazon page');
        }

        return [
            'title' => $title,
            'price' => $price,
            'image_url' => $imageUrl,
            'source_url' => $url
        ];
    }
    private function parseJumiaProduct($html, $url)
    {
        $dom = new DOMDocument();
        @$dom->loadHTML($html);
        $xpath = new DOMXPath($dom);

        $titleNode = $xpath->query('//h1[@class="-fs20 -pts -pbxs"]')->item(0);
        $title = $titleNode ? trim($titleNode->textContent) : '';

        $priceNode = $xpath->query('//span[@class="-b -ltr -tal -fs24"]')->item(0);
        $price = $priceNode ? (float) preg_replace('/[^0-9.]/', '', $priceNode->textContent) : 0;

        $imageNode = $xpath->query('//img[@class="-fw -fh"]')->item(0);
        $imageUrl = $imageNode ? $imageNode->getAttribute('src') : '';

        if (empty($title)) {
            throw new \Exception('Could not extract product title from Jumia page');
        }

        return [
            'title' => $title,
            'price' => $price,
            'image_url' => $imageUrl,
            'source_url' => $url
        ];
    }
    public function saveProduct($productData)
    {
        try {
            $product = Product::create([
                'title' => $productData['title'],
                'price' => $productData['price'],
                'image_url' => $productData['image_url'],
            ]);

            Log::info('Product saved successfully: ' . $product->id);
            return $product;
        } catch (\Exception $e) {
            Log::error('Failed to save product: ' . $e->getMessage());
            throw $e;
        }
    }
    public function scrapeAndSave($url)
    {
        $productData = $this->scrapeProduct($url);
        if ($productData) {
            return $this->saveProduct($productData);
        }
        return null;
    }
    public function getAllProducts()
    {
        return Product::orderBy('created_at', 'desc')->get();
    }
    public function getProductById($id)
    {
        return Product::find($id);
    }
}
